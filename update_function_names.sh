#!/bin/bash

# Define the function name mappings
declare -A function_names=(
    ["checkSorted"]="check_if_sorted"
    ["pushSwapStrlen"]="push_swap_strlen"
    ["freeTab"]="free_tab_memory"
    ["checkErrorArg"]="check_argument_error"
    ["isNumeric"]="is_numeric_string"
    ["freeAtoi"]="free_atoi_memory"
    ["ftAtoi"]="ft_atoi"
    ["sortList"]="sort_list_elements"
    ["initializeList"]="initialize_list"
    ["checkDuplicate"]="check_for_duplicates"
    ["checkInverted"]="check_if_inverted"
    ["deleteList"]="delete_linked_list"
    ["swapA"]="swap_stack_a"
    ["swapB"]="swap_stack_b"
    ["swapBoth"]="swap_both_stacks"
    ["pushA"]="push_to_stack_a"
    ["pushB"]="push_to_stack_b"
    ["rotateA"]="rotate_stack_a"
    ["rotateB"]="rotate_stack_b"
    ["rotateBoth"]="rotate_both_stacks"
    ["reverseRotateA"]="reverse_rotate_stack_a"
    ["reverseRotateB"]="reverse_rotate_stack_b"
    ["reverseRotateBoth"]="reverse_rotate_both_stacks"
    ["sortThree"]="sort_three_elements"
    ["sortFive"]="sort_five_elements"
    ["checkArguments"]="validate_arguments"
    ["moveToB"]="move_to_stack_b"
    ["moveToA"]="move_to_stack_a"
    ["bestPositionB"]="find_best_position_in_stack_b"
    ["moveRemainingNumbers"]="move_remaining_numbers_to_b"
    ["findBestCombination"]="find_best_combination_of_moves"
    ["findBestCombinationHelper"]="helper_find_best_combination"
    ["pushMinToTop"]="push_minimum_to_top"
    ["searchMin"]="find_minimum_in_stack"
    ["copyStackNumber"]="copy_stack_number_values"
    ["copyIntArray"]="copy_integer_array"
    ["countMoves"]="count_total_moves"
    ["countMovesA"]="count_moves_in_stack_a"
    ["countMovesB"]="count_moves_in_stack_b"
    ["maxNumber"]="max_number_in_stack"
    ["minNumber"]="min_number_in_stack"
    ["maxOrMin"]="get_max_or_min_value"
    ["returnMaxOrMin"]="return_max_or_min_value"
    ["constructLIS"]="construct_longest_increasing_subsequence"
    ["findMaxLISLength"]="find_max_length_of_lis"
    ["updateLISAndPrev"]="update_lis_and_previous_values"
    ["initializeLisAndPreviousValues"]="initialize_lis_and_previous_values"
    ["defineLIS"]="define_longest_increasing_subsequence"
    ["findLISAndLen"]="find_lis_and_length"
    ["checkLen"]="check_list_length"
    ["checkNumeric"]="check_if_numeric"
    ["checkAtoi"]="check_atoi_conversion"
    ["checkArg3"]="check_argument_three"
    ["checkDeleteList"]="check_and_delete_list"
    ["checkDup"]="check_for_duplicate_values"
    ["checkInstruction"]="validate_instruction"
    ["checkInstructionRRR"]="validate_reverse_rotate_instruction"
    ["checkList"]="check_list_integrity"
    ["okOrKO"]="check_if_ok_or_ko"
    ["swapACheck"]="validate_swap_a"
    ["swapBCheck"]="validate_swap_b"
    ["swapSCheck"]="validate_swap_s"
    ["pushACheck"]="validate_push_a"
    ["pushBCheck"]="validate_push_b"
    ["rotateACheck"]="validate_rotate_a"
    ["rotateBCheck"]="validate_rotate_b"
    ["rotateRCheck"]="validate_rotate_r"
    ["reverseRotateACheck"]="validate_reverse_rotate_a"
    ["reverseRotateBCheck"]="validate_reverse_rotate_b"
    ["reverseRotateRCheck"]="validate_reverse_rotate_r"
    ["writeError"]="write_error_message"
)

# Iterate over all C source files in the directory
for file in *.c *.h; do
    # Iterate over the function name mappings
    for old_name in "${!function_names[@]}"; do
        new_name=${function_names[$old_name]}
        # Replace the old function name with the new function name
        sed -i "s/\b$old_name\b/$new_name/g" "$file"
    done
done